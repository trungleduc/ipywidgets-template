name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  names:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "my_extension"
            pyname: "my_extension"
          - name: "myextension"
            pyname: "myextension"
          - name: "my-extension"
            pyname: "my_extension"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          python -m pip install "copier>=8.0.0" jinja2-time "pydantic<2.0.0"

      - name: Create pure frontend extension
        env:
          NAME: ${{ matrix.name }}
          PYNAME: ${{ matrix.pyname }}
        run: |
          set -eux
          mkdir ${NAME}
          python -m copier copy -l -d author_name="My Name" -d labextension_name="${NAME}" -d python_name="${PYNAME}" -d repository="https://github.com/test/lab-extension" --vcs-ref HEAD --UNSAFE . ${NAME}
          pushd ${NAME}
          python -m pip install "jupyterlab>=4.0.0,<5"
          YARN_ENABLE_IMMUTABLE_INSTALLS=false jlpm
          jlpm lint:check
          python -m pip install -e .
          jupyter labextension develop . --overwrite
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "${NAME}.*OK"
          python -m jupyterlab.browser_check

          jupyter labextension uninstall ${NAME}
          python -m pip uninstall -y ${NAME} jupyterlab

          popd
          rm -rf ${NAME}

  quoted-description:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This will be used by the base setup action
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        run: |
          python -m pip install "copier>=8.0.0" jinja2-time "pydantic<2.0.0"

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create pure frontend extension
        run: |
          set -eux
          mkdir myextension
          python -m copier copy -l -d author_name="My Name" -d description="Let's \"rock and roll\"" -d repository="https://github.com/test/lab-extension" --vcs-ref HEAD --UNSAFE . myextension
          pushd myextension
          pip install "jupyterlab>=4.0.0,<5"
          YARN_ENABLE_IMMUTABLE_INSTALLS=false jlpm
          jlpm lint:check
          pip install -e .
          jupyter labextension develop . --overwrite
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          python -m jupyterlab.browser_check

          jupyter labextension uninstall myextension
          pip uninstall -y myextension jupyterlab

          popd
          rm -rf myextension

  no-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This will be used by the base setup action
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        run: |
          python -m pip install "copier>=8.0.0" jinja2-time "pydantic<2.0.0"

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create pure frontend extension
        run: |
          set -eux
          mkdir myextension
          python -m copier copy -l -d author_name="My Name" -d test=n -d repository="https://github.com/test/lab-extension" --vcs-ref HEAD --UNSAFE . myextension
          pushd myextension
          pip install "jupyterlab>=4.0.0,<5"
          YARN_ENABLE_IMMUTABLE_INSTALLS=false jlpm
          jlpm lint:check
          pip install -e .
          jupyter labextension develop . --overwrite
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          python -m jupyterlab.browser_check

          jupyter labextension uninstall myextension
          pip uninstall -y myextension jupyterlab

          popd
          rm -rf myextension

  settings:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This will be used by the base setup action
        python-version: ["3.8", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        run: |
          python -m pip install "copier>=8.0.0" jinja2-time "pydantic<2.0.0"

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create pure frontend extension
        run: |
          set -eux
          mkdir myextension
          python -m copier copy -l -d author_name="My Name" -d has_settings=y -d repository="https://github.com/test/lab-extension" --vcs-ref HEAD --UNSAFE . myextension
          pushd myextension
          pip install "jupyterlab>=4.0.0,<5"
          YARN_ENABLE_IMMUTABLE_INSTALLS=false jlpm
          # It is not easily possible to get this version compatible with linter rules
          jlpm lint
          jlpm lint:check
          pip install -e .
          jupyter labextension develop . --overwrite
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          python -m jupyterlab.browser_check

          jupyter labextension uninstall myextension
          pip uninstall -y myextension jupyterlab

          popd
          rm -rf myextension

  test_isolated:
    needs: server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: "x64"
      - name: Setup pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-
      - uses: actions/download-artifact@v2
        with:
          name: myextension-sdist
      - name: Install and Test
        run: |
          set -eux
          # Remove NodeJS, twice to take care of system and locally installed node versions.
          sudo rm -rf $(which node)
          sudo rm -rf $(which node)

          python -m pip install myextension.tar.gz
          python -m pip install "jupyterlab>=4.0.0,<5"
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "myextension.*OK"
          python -m jupyterlab.browser_check --no-browser-test
